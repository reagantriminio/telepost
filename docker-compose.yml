version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: telepost_db
    environment:
      POSTGRES_DB: telepost_db
      POSTGRES_USER: telepost_user
      POSTGRES_PASSWORD: telepost_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telepost_user -d telepost_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telepost_backend
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://telepost_user:telepost_password@database:5432/telepost_db
      - SECRET_KEY=your-secret-key-change-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:4000,http://127.0.0.1:4000,http://localhost:80
      - STORESCU_PATH=/usr/bin/storescu
      - ECHOSCU_PATH=/usr/bin/echoscu
    volumes:
      - backend_media:/app/media
      - backend_static:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--deploy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: telepost_frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  backend_media:
    driver: local
  backend_static:
    driver: local

networks:
  default:
    driver: bridge 